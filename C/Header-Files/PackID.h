#ifndef _M602PACK_H_H
#define _M602PACK_H_H  
/////////////////////////////////////////////////////////
#define MAX_COUNT 1500
#define INVALID_VALUE 10000
#define DEFAULT_VALUE 200000
#define SPO2_DEFAULT_VALUE 250
#define INVALID_SPO2_VALUE 127
#define INVALID_PR_VALUE 511
#define INVALID_PI_VALUE 0
#define MAX_COUNT 1500

#define INFO_FONTCOLOR RGB(50, 225, 225)

//数据包参数类型定义
enum PACKET_PARAM_TYPE
{
	PARAM_NONE = 0x00,
	PARAM_ECG,
	PARAM_NBP,
	PARAM_SPO2,
	PARAM_ETCO2,
	PARAM_ADI,
	PARAM_RESP,
	PARAM_M602_IBP,	//M602需要用到的部分
	PARAM_CO,
	PARAM_O2,
	PARAM_IRM,
	PARAM_GAS,
	PARAM_TREETEMP,
	PARAM_INMT,
	PARAM_M602_CCO,	 //M602需要用到的部分
	PARAM_UPARA,
	PARAM_MECG,
	PARAM_IFM,
	PARAM_IAM,
	PARAM_IBM,
	PARAM_ITCD,

	PARAM_END    //未使用的协议可以用来进行未来参数的扩展
};


typedef enum _ZUGMED_RESPONSE_LIST
{
	ZUGMED_RESPONSE_ANSWER			           = 0x80,     //通用命令应答包
	ZUGMED_RESPONSE_CONNECT_ACK 	           = 0x81,     //上电握手请求数据包
	ZUGMED_RESPONSE_MODULE_INFO               = 0x82,     //软件、算法及通讯协议版本
	ZUGMED_RESPONSE_SELF_TEST_INFO 	       = 0x83,     //模块自检结果数据包
	ZUGMED_RESPONSE_RT_PLS 		           = 0x84,     //实时波形数据包
	ZUGMED_RESPONSE_RESULT 		           = 0x85,     //计算结果及状态数据包

	ZUGMED_RESPONSE_MAX
} ZUGMED_RESPONSE_LIST;

typedef enum _ZUGMED_CMD_LIST
{
	ZUGMED_CMD_CONNECT_ACK     			= 0x01,      //上电握手命令帧ID
	ZUGMED_CMD_REQUEST_MODULE_INFO 		= 0x02,	     //查询模块信息帧ID，包括版本信息、算法信息、通讯协议信息
	ZUGMED_CMD_REQUEST_SELF_TEST_RESULT	= 0x03,      //自检结果查询
	ZUGMED_CMD_SET_PATIENT_MODE			= 0x04,      //设置病人类型
	ZUGMED_CMD_SET_AVERAGE_TIME			= 0x05,      //设置计算灵敏度

	ZUGMED_CMD_UPDATE				= 0x7F,

	ZUGMED_CMD_MAX
} ZUGMED_CMD_LIST;

typedef enum _SYS_REPORT_STATUS
{
	SYS_ALL_NORMAL          = 0x00,         //系统一切正常；
	SYS_HYPOPERFUSION   = 0X01,         // 低灌注: '1'，表示低灌注；若为'0'，则表示正常
	SYS_MOVEMEMT_DISTURB  = 0X02,       // 运动干扰: '1'，表示运动干扰；若为'0'，则正常
	SYS_HYPER_MOVEMEMT_DISTURB = 0x04,  // 过度运动干扰: '1'，表示过度运动干扰；若为'0'，则正常
	SYS_SEARCH_PULSE = 0X08,            // 搜索脉搏波: '1'，表示搜索脉搏波；若为'0'，则表示正常
	SYS_LONGTIME_SEARCH_PULSE_NO = 0x10,// 搜索脉搏波时间过长或无脉搏波
	SYS_LED_DITACHED = 0x20,            // 探头未接:'1'，表示探头未接；若为'0'，则表示正常。
	SYS_FIGURE_NOT_IN = 0x40,           // 手指未接入:'1'，表示手指未接入；若为'0'，则表示正常。
	SYS_LED_ERROR = 0X80,               // 探头故障:'1', 探头故障；若为'0',则表示正常。
	SYS_HARDWARE_ERROR = 0x01,          // 硬件错误:'1', 硬件错误；若为'0',则表示正常
	SYS_BACKLIGHT_TOOBRIGHT = 0X02,     // 背景光太强:'1', 背景光太强；若为'0',则表示正常
	SYS_LED_UNMATCHING = 0x04           // 探头不匹配:'1', 探头不匹配；若为'0',则表示正常
}SYS_REPORT_STATUS;

#define INVALID_PULSE_WAVE  0xFF
#define INVALID_SPO2        0x7F
#define INVALID_PLUSE_RARE  0x1FF

/////////////////////////////////////////////////////////////////////////
/*
typedef enum _ZUGMED_PACKET_ID_LIST
{
	ZUGMED_PACKET_ID_CMD_HANDSHAKE			= 0x01,
	ZUGMED_PACKET_ID_REQUEST_MODULE_INFO	= 0x02,
	ZUGMED_PACKET_ID_REQUEST_MODULE_STATUS	= 0x03,

	ZUGMED_PACKET_ID_CMD_SET_PATIENT		= 0x10,

	ZUGMED_PACKET_ID_CMD_ECG_SET_LEAD_SET	= 0x20,
	ZUGMED_PACKET_ID_CMD_ECG_SET_LEAD		= 0x21,
	ZUGMED_PACKET_ID_CMD_ECG_SET_FILTER	= 0x22,
	ZUGMED_PACKET_ID_CMD_ECG_SET_TRAP		= 0x23,
	ZUGMED_PACKET_ID_CMD_ECG_SET_GAIN		= 0x24,
	ZUGMED_PACKET_ID_CMD_ECG_SET_ST_POS	= 0x25,
	ZUGMED_PACKET_ID_CMD_ECG_SET_ARR_CHAN	= 0x26,
	ZUGMED_PACKET_ID_CMD_ECG_START_STOP_PACE	= 0x27,
	ZUGMED_PACKET_ID_CMD_ECG_START_STOP_CAL	= 0x28,
	ZUGMED_PACKET_ID_CMD_ECG_PACE_SET_LEAD		= 0x29,

	ZUGMED_PACKET_ID_CMD_RESP_SET_APNEA		= 0x30,
	ZUGMED_PACKET_ID_CMD_RESP_SET_LEAD			= 0x31,
	ZUGMED_PACKET_ID_CMD_RESP_SET_SENSITIVITY	= 0x32,


	ZUGMED_PACKET_ID_RESPONSE_GENERAL	= 0x80,
	ZUGMED_PACKET_ID_REQUEST_HANDSHAKE	= 0x81,
	ZUGMED_PACKET_ID_RESPONSE_MODULE_INFO	= 0x82,
	ZUGMED_PACKET_ID_RESPONSE_MODULE_STATUS	= 0x83,

	ZUGMED_PACKET_ID_DATA_ECG_RESP_WAVE	= 0x90,
	ZUGMED_PACKET_ID_DATA_ECG_RESP_RATE	= 0x91,
	ZUGMED_PACKET_ID_DATA_ECG_LEAD_STATUS	= 0x92,
	ZUGMED_PACKET_ID_DATA_ECG_CHAN_OVLD	= 0x93,

	ZUGMED_PACKET_ID_DATA_RESP_APNEA_FLAG	= 0xA0,
	ZUGMED_PACKET_ID_DATA_RESP_CVA_FLAG	= 0xA1,

	ZUGMED_PACKET_ID_DATA_TEMP_RESULT		= 0xB0,

	ZUGMED_PACKET_ID_MAX
} ZUGMED_PACKET_ID_LIST;
*/
typedef enum _ZUGMED_GENERAL_RESPONSE_LIST
{
	ZUGMED_GENERAL_RESPONSE_PARATYPE_ERROR	= 0x01,
	ZUGMED_GENERAL_RESPONSE_TYPE_ERROR		= 0x02,
	ZUGMED_GENERAL_RESPONSE_ID_ERROR		= 0x03,
	ZUGMED_GENERAL_RESPONSE_DATA_ERROR		= 0x04,
	ZUGMED_GENERAL_RESPONSE_NO_ERROR		= 0x05,
	ZUGMED_GENERAL_RESPONSE_CHECKSUM_ERROR	= 0x06,
	ZUGMED_GENERAL_RESPONSE_SUCCEED		= 0x07,
	ZUGMED_GENERAL_RESPONSE_FAIL			= 0x08,
	ZUGMED_GENERAL_RESPONSE_BUSY			= 0x09,

	ZUGMED_GENERAL_RESPONSE_MAX

} ZUGMED_GENERAL_RESPONSE_LIST;

//NBP
typedef enum _ZUGMED_NBP_CMD_LIST
{
	ZUGMED_CMD_NBP_CONNECT_ACK     	= 0x01,      //上电握手命令帧ID
	ZUGMED_CMD_NBP_REQUEST_MODULE_INFO = 0x02,	     //查询模块信息帧ID，包括版本信息、算法信息、通讯协议信息和自检结果
	ZUGMED_CMD_NBP_REQUEST_TEST_RESULT	= 0x03,      //查询测试结果和状态
	ZUGMED_CMD_NBP_REQUEST_CUFF_PRS	= 0x04,      //查询实时袖带压
	ZUGMED_CMD_NBP_SET_PATIENT_MODE	= 0x10,      //设置病人类型
	ZUGMED_CMD_NBP_SET_PREINFLATE_PRS	= 0x11,      //设置初始充气压力
	ZUGMED_CMD_NBP_SET_MEASURE_MODE	= 0x12,      //设置测量模式
	ZUGMED_CMD_NBP_SET_VP_PRS			= 0x13,      //设置静脉穿刺压力
	ZUGMED_CMD_NBP_STOP			    = 0x20,      //终止测量
	ZUGMED_CMD_NBP_START       		= 0x21,      //启动测量
	ZUGMED_CMD_NBP_START_CALIBRATE_PRS	= 0x22,      //启动压力校准
	ZUGMED_CMD_NBP_START_CHECK_LEAK    = 0x23,     //启动漏气检测
	ZUGMED_CMD_NBP_START_VP            = 0x24,      //启动静脉穿刺
	ZUGMED_CMD_NBP_RESET_SYSTEM		= 0x30,      //复位模块
	ZUGMED_CMD_NBP_ENTER_SLEEP         = 0x31,      //进入休眠
	ZUGMED_CMD_NBP_START_SYS_CHECK     = 0x32,
	ZUGMED_CMD_NBP_SET_CUFFPRS_PARA	= 0x70,      //设置袖带压计算参数
	ZUGMED_CMD_NBP_SET_SECURITY		= 0x71,      //设置软件保护压力

	ZUGMED_CMD_NBP_UPDATE				= 0x7F,

	ZUGMED_CMD_NBP_MAX
} ZUGMED_CMD_NBP_LIST;

/*typedef enum _ZUGMED_RESPONSE_LIST
{
ZUGMED_RESPONSE_ANSWER			= 0x80,
ZUGMED_RESPONSE_MODULE_INFO	= 0x81,
ZUGMED_RESPONSE_POST_RESULT	= 0x82,
ZUGMED_RESPONSE_RT_PLS_PRS		= 0x83,
ZUGMED_RESPONSE_CUFFPRS		= 0x84,
ZUGMED_RESPONSE_TEST_RESULT	= 0x85,
ZUGMED_RESPONSE_SAVED_PLS_PRS	= 0x86,
ZUGMED_RESPONSE_NOTIFY_RESET	= 0x87,
ZUGMED_RESPONSE_NOTIFY_END		= 0x88,
ZUGMED_RESPONSE_STATUS_INFO	= 0x89,

ZUGMED_RESPONSE_MAX
} ZUGMED_RESPONSE_LIST;*/

typedef enum _ZUGMED_NBP_RESPONSE_LIST
{
	ZUGMED_NBP_RESPONSE_ANSWER			           = 0x80,     //通用命令应答包
	ZUGMED_NBP_RESPONSE_CONNECT_ACK 	           = 0x81,     //上电握手请求数据包
	ZUGMED_NBP_RESPONSE_MODULE_INFO               = 0x82,     //模块信息应答数据包ID
	ZUGMED_NBP_RESPONSE_TEST_RESULT_STATUS	       = 0x83,     //测试结果和状态应答数据包
	ZUGMED_NBP_RESPONSE_CUFFPRS		           = 0x84,     //实时袖带压数据包
	ZUGMED_NBP_RESPONSE_RT_PLS_PRS		           = 0x85,     //实时压力波形和脉搏波形数据包
	ZUGMED_NBP_RESPONSE_NOTIFY_END		           = 0x86,     //测量开始或停止通知数据包
	ZUGMED_NBP_RESPONSE_BEEP                      = 0x87,     //心跳标志数据包

	ZUGMED_NBP_RESPONSE_MAX
} ZUGMED_NBP_RESPONSE_LIST;
typedef enum _ZUGMED_NOTIFY_LIST
{
	ZUGMED_NOTIFY_MODE_BP                     = 0x00,   //血压测量
	ZUGMED_NOTIFY_MODE_CALIBRATE_PRS          = 0x01,   //袖带压力校准
	ZUGMED_NOTIFY_MODE_CHECK_LEAK             = 0x02,   //漏气检测
	ZUGMED_NOTIFY_MODE_VP                     = 0x03,   


	ZUGMED_NOTIFY_MODE_MAX

}ZUGMED_NOTIFY_LIST;

typedef enum _ZUGMED_NOTIFY_START_OR_STOP_LIST
{
	ZUGMED_NOTIFY_MODE_STATE_START            = 0x01,
	ZUGMED_NOTIFY_MODE_STATE_END             = 0x00,

	ZUGMED_NOTIFY_MODE_STATE_MAX

}ZUGMED_NOTIFY_START_OR_STOP_LIST;

typedef enum _ZUGMED_ERROR_MESSAGE_LIST
{
	ZUGMED_ERROR_MESSAGE_NORMAL    	    = 0,
	ZUGMED_ERROR_MESSAGE_CUFF_LOOSE	    = 1,
	ZUGMED_ERROR_MESSAGE_LEAK	            = 2,
	ZUGMED_ERROR_MESSAGE_PRS_ERROR	        = 3,
	ZUGMED_ERROR_MESSAGE_WEAK_SIGNAL	    = 4,
	ZUGMED_ERROR_MESSAGE_EXCEED_SCOPE	    = 5,
	ZUGMED_ERROR_MESSAGE_MOVE	            = 6,
	ZUGMED_ERROR_MESSAGE_OVER_PRS  	    = 7,
	ZUGMED_ERROR_MESSAGE_SIGNAL_SATURATION	= 8,
	ZUGMED_ERROR_MESSAGE_TIMEOUT        	= 9,
	ZUGMED_ERROR_MESSAGE_STOP              = 10,
	ZUGMED_ERROR_MESSAGE_SYSTEM_ERROR	    = 11,

	ZUGMED_ERROR_MESSAGE_MAX
} ZUGMED_ERROR_MESSAGE_LIST;

typedef enum _ZUGMED_CMD_START_OR_STOP_PARA_LIST
{	
	ZUGMED_CMD_START_OR_STOP_PARA_START	= 0x00,
	ZUGMED_CMD_START_OR_STOP_PARA_STOP		= 0x01,

	ZUGMED_CMD_START_OR_STOP_PARA_MAX
} ZUGMED_CMD_START_OR_STOP_PARA_LIST;

typedef enum MEASURE_MODE_LIST
{
	MEASURE_MODE_MANUAL	= 0,

	MEASURE_MODE_AUTO_1MIN	= 1,
	MEASURE_MODE_AUTO_2MIN	= 2,
	MEASURE_MODE_AUTO_3MIN	= 3,
	MEASURE_MODE_AUTO_4MIN	= 4,
	MEASURE_MODE_AUTO_5MIN	= 5,
	MEASURE_MODE_AUTO_10MIN	= 6,
	MEASURE_MODE_AUTO_15MIN	= 7,
	MEASURE_MODE_AUTO_30MIN	= 8,
	MEASURE_MODE_AUTO_60MIN	= 9,
	MEASURE_MODE_AUTO_90MIN	= 10,
	MEASURE_MODE_AUTO_2HOUR	= 11,
	MEASURE_MODE_AUTO_3HOUR	= 12,
	MEASURE_MODE_AUTO_4HOUR	= 13,
	MEASURE_MODE_AUTO_8HOUR	= 14,

	MEASURE_MODE_CONT		= 15,

	MEASURE_MODE_MAX
} MEASURE_MODE_LIST;

typedef enum _ZUGMED_CMD_SET_MEASURE_MODE_PARA_LIST
{
	ZUGMED_CMD_SET_MEASURE_MODE_PARA_MANUAL	= MEASURE_MODE_MANUAL,

	ZUGMED_CMD_SET_MEASURE_MODE_PARA_AUTO_1MIN		= MEASURE_MODE_AUTO_1MIN,
	ZUGMED_CMD_SET_MEASURE_MODE_PARA_AUTO_2MIN		= MEASURE_MODE_AUTO_2MIN,
	ZUGMED_CMD_SET_MEASURE_MODE_PARA_AUTO_3MIN		= MEASURE_MODE_AUTO_3MIN,
	ZUGMED_CMD_SET_MEASURE_MODE_PARA_AUTO_4MIN		= MEASURE_MODE_AUTO_4MIN,
	ZUGMED_CMD_SET_MEASURE_MODE_PARA_AUTO_5MIN		= MEASURE_MODE_AUTO_5MIN,
	ZUGMED_CMD_SET_MEASURE_MODE_PARA_AUTO_10MIN		= MEASURE_MODE_AUTO_10MIN,
	ZUGMED_CMD_SET_MEASURE_MODE_PARA_AUTO_15MIN		= MEASURE_MODE_AUTO_15MIN,
	ZUGMED_CMD_SET_MEASURE_MODE_PARA_AUTO_30MIN		= MEASURE_MODE_AUTO_30MIN,
	ZUGMED_CMD_SET_MEASURE_MODE_PARA_AUTO_60MIN		= MEASURE_MODE_AUTO_60MIN,
	ZUGMED_CMD_SET_MEASURE_MODE_PARA_AUTO_90MIN		= MEASURE_MODE_AUTO_90MIN,
	ZUGMED_CMD_SET_MEASURE_MODE_PARA_AUTO_2HOUR		= MEASURE_MODE_AUTO_2HOUR,
	ZUGMED_CMD_SET_MEASURE_MODE_PARA_AUTO_3HOUR		= MEASURE_MODE_AUTO_3HOUR,
	ZUGMED_CMD_SET_MEASURE_MODE_PARA_AUTO_4HOUR		= MEASURE_MODE_AUTO_4HOUR,
	ZUGMED_CMD_SET_MEASURE_MODE_PARA_AUTO_8HOUR		= MEASURE_MODE_AUTO_8HOUR,

	ZUGMED_CMD_SET_MEASURE_MODE_PARA_CONT		= MEASURE_MODE_CONT,

	ZUGMED_CMD_SET_MEASURE_MODE_PARA_MAX
} ZUGMED_CMD_SET_MEASURE_MODE_PARA_LIST;

typedef enum _PATIENT_MODE_LIST
{
	PATIENT_MODE_ADULT	= 0,
	PATIENT_MODE_NEON	= 1,
	PATIENT_MODE_CHILD	= 2,

	PATIENT_MODE_MAX
} PATIENT_MODE_LIST;

typedef enum _ZUGMED_CMD_SET_PATIENT_MODE_PARA_LIST
{
	ZUGMED_CMD_SET_PATIENT_MODE_PARA_ADULT	= PATIENT_MODE_ADULT,
	ZUGMED_CMD_SET_PATIENT_MODE_PARA_NEON	= PATIENT_MODE_NEON,
	ZUGMED_CMD_SET_PATIENT_MODE_PARA_CHILD	= PATIENT_MODE_CHILD,

	ZUGMED_CMD_SET_PATIENT_MODE_PARA_MAX
} ZUGMED_CMD_SET_PATIENT_MODE_PARA_LIST;

typedef enum _ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_LIST
{
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_60MMHG		= 0x00,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_70MMHG		= 0x01,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_80MMHG		= 0x02,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_90MMHG		= 0x03,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_100MMHG		= 0x04,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_110MMHG		= 0x05,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_120MMHG		= 0x06,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_130MMHG		= 0x07,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_140MMHG		= 0x08,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_150MMHG		= 0x09,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_160MMHG		= 0x0A,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_170MMHG		= 0x0B,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_180MMHG		= 0x0C,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_190MMHG		= 0x0D,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_200MMHG		= 0x0E,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_210MMHG		= 0x0F,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_220MMHG		= 0x10,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_230MMHG		= 0x11,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_240MMHG		= 0x12,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_250MMHG		= 0x13,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_260MMHG		= 0x14,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_270MMHG		= 0x15,
	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_280MMHG		= 0x16,

	ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_MAX	
} ZUGMED_CMD_SET_PREINFLATE_PRS_PARA_LIST;

typedef enum _ZUGMED_CMD_SET_WORK_MODE_PARA_LIST
{	
	ZUGMED_CMD_SET_WORK_MODE_PARA_MANOMETER		= 0x02,
	ZUGMED_CMD_SET_WORK_MODE_PARA_CHECK_LEAK		= 0x03,
	ZUGMED_CMD_SET_WORK_MODE_PARA_VENIPUNCTURE		= 0x04,
	ZUGMED_CMD_SET_WORK_MODE_PARA_CHECK_WATCHDOG	= 0x05,

	ZUGMED_CMD_SET_WORK_MODE_PARA_MAX
} ZUGMED_CMD_SET_WORK_MODE_PARA_LIST;

typedef enum _ZUGMED_CMD_SET_VP_PRS_PARA_LIST
{
	ZUGMED_CMD_SET_VP_PRS_PARA_22MMHG		= 0x02,
	ZUGMED_CMD_SET_VP_PRS_PARA_32MMHG		= 0x03,
	ZUGMED_CMD_SET_VP_PRS_PARA_42MMHG		= 0x04,
	ZUGMED_CMD_SET_VP_PRS_PARA_52MMHG		= 0x05,
	ZUGMED_CMD_SET_VP_PRS_PARA_62MMHG		= 0x06,
	ZUGMED_CMD_SET_VP_PRS_PARA_72MMHG		= 0x07,
	ZUGMED_CMD_SET_VP_PRS_PARA_82MMHG		= 0x08,
	ZUGMED_CMD_SET_VP_PRS_PARA_92MMHG		= 0x09,
	ZUGMED_CMD_SET_VP_PRS_PARA_102MMHG		= 0x0A,
	ZUGMED_CMD_SET_VP_PRS_PARA_112MMHG		= 0x0B,
	ZUGMED_CMD_SET_VP_PRS_PARA_122MMHG		= 0x0C,

	ZUGMED_CMD_SET_VP_PRS_PARA_MAX
} ZUGMED_CMD_SET_VP_PRS_PARA_LIST;

typedef enum _ZUGMED_CMD_SET_SECURITY_PARA_LIST
{	
	ZUGMED_CMD_SET_SECURITY_PARA_ENABLE_SOFT_PROTECT	= 0x00,
	ZUGMED_CMD_SET_SECURITY_PARA_DISABLE_SOFT_PROTECT	= 0x01,

	ZUGMED_CMD_SET_SECURITY_PARA_MAX
} ZUGMED_CMD_SET_SECURITY_PARA_LIST;

typedef enum _ZUGMED_CMD_SET_CALIBRATE_PRS_PARA_LIST
{
	ZUGMED_CMD_SET_CALIBRATE_PRS_PARA_MANUAL	= 0x00,
	ZUGMED_CMD_SET_CALIBRATE_PRS_PARA_50MMHG	= 0x01,
	ZUGMED_CMD_SET_CALIBRATE_PRS_PARA_100MMHG	= 0x02,
	ZUGMED_CMD_SET_CALIBRATE_PRS_PARA_150MMHG	= 0x03,
	ZUGMED_CMD_SET_CALIBRATE_PRS_PARA_200MMHG	= 0x04,
	ZUGMED_CMD_SET_CALIBRATE_PRS_PARA_250MMHG	= 0x05,

	ZUGMED_CMD_SET_CALIBRATE_PRS_PARA_MAX
} ZUGMED_CMD_SET_CALIBRATE_PRS_PARA_LIST;

#endif
